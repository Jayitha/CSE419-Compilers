Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | CLASS PROGRAM OPEN_CURLY method_decls CLOSE_CURLY

    3 var_decls: var_decl var_decls
    4          | var_decl

    5 var_decl: DECLARE type location SEMICOLON

    6 method_decls: method_decl method_decls
    7             | method_decl

    8 method_decl: return_type ID OPEN_PARAN method_args CLOSE_PARAN block

    9 return_type: VOID
   10            | type
   11            | type OPEN_ANG INT_LITERAL CLOSE_ANG
   12            | type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

   13 method_args: VOID
   14            | method_arg COMMA method_args
   15            | method_arg

   16 method_arg: type ID
   17           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG
   18           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

   19 block: OPEN_CURLY var_decls statements CLOSE_CURLY
   20      | OPEN_CURLY statements CLOSE_CURLY

   21 statements: statement statements
   22           | statement

   23 statement: location ASSIGN expr SEMICOLON
   24          | method_call SEMICOLON
   25          | if_else_statment
   26          | expr QM block COLON block
   27          | WHILE OPEN_PARAN expr CLOSE_PARAN block
   28          | FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block
   29          | RETURN SEMICOLON
   30          | RETURN OPEN_PARAN expr CLOSE_PARAN SEMICOLON
   31          | BREAK SEMICOLON
   32          | CONTINUE SEMICOLON
   33          | block

   34 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block
   35                 | IF OPEN_PARAN expr CLOSE_PARAN block ELSE block

   36 method_call: CALLOUT OPEN_PARAN STRING_LITERAL CLOSE_PARAN
   37            | CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN

   38 callout_args: expr COMMA callout_args
   39             | expr

   40 expr: location
   41     | method_call
   42     | literal
   43     | expr ADD expr
   44     | expr SUB expr
   45     | expr MULTIPLY expr
   46     | expr DIVIDE expr
   47     | expr MODULO expr
   48     | expr LEQ expr
   49     | expr GEQ expr
   50     | expr LESSTHAN expr
   51     | expr GREATERTHAN expr
   52     | expr EQUALITY expr
   53     | expr NONEQUALITY expr
   54     | expr LOGICAL_OR expr
   55     | expr LOGICAL_AND expr
   56     | SUB expr
   57     | LOGICAL_NOT expr
   58     | OPEN_PARAN expr CLOSE_PARAN

   59 location: ID
   60         | ID OPEN_ANG expr CLOSE_ANG
   61         | ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

   62 literal: INT_LITERAL
   63        | CHAR_LITERAL
   64        | bool_literal
   65        | STRING_LITERAL

   66 bool_literal: TRUE
   67             | FALSE

   68 type: INT
   69     | UINT
   70     | BOOL
   71     | CHAR


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 23 28
BOOL (259) 70
BREAK (260) 31
CALLOUT (261) 36 37
CHAR (262) 71
CHAR_LITERAL (263) 63
CLASS (264) 1 2
CLOSE_ANG (265) 11 12 17 18 60 61
CLOSE_CURLY (266) 1 2 19 20
CLOSE_PARAN (267) 8 27 28 30 34 35 36 37 58
COLON (268) 26
COMMA (269) 14 37 38
CONTINUE (270) 32
DECLARE (271) 5
ELSE (272) 35
FALSE (273) 67
FOR (274) 28
ID (275) 8 16 17 18 28 59 60 61
IF (276) 34 35
INT (277) 68
INT_LITERAL (278) 11 12 17 18 62
OPEN_ANG (279) 11 12 17 18 60 61
OPEN_CURLY (280) 1 2 19 20
OPEN_PARAN (281) 8 27 28 30 34 35 36 37 58
PROGRAM (282) 1 2
QM (283) 26
RETURN (284) 29 30
STRING_LITERAL (285) 36 37 65
SEMICOLON (286) 5 23 24 28 29 30 31 32
TRUE (287) 66
UINT (288) 69
VOID (289) 9 13
WHILE (290) 27
LOGICAL_OR (291) 54
LOGICAL_AND (292) 55
EQUALITY (293) 52
NONEQUALITY (294) 53
LESSTHAN (295) 50
GREATERTHAN (296) 51
LEQ (297) 48
GEQ (298) 49
SUB (299) 44 56
ADD (300) 43
MULTIPLY (301) 45
DIVIDE (302) 46
MODULO (303) 47
LOGICAL_NOT (304) 57


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2, on right: 0
var_decls (52)
    on left: 3 4, on right: 1 3 19
var_decl (53)
    on left: 5, on right: 3 4
method_decls (54)
    on left: 6 7, on right: 1 2 6
method_decl (55)
    on left: 8, on right: 6 7
return_type (56)
    on left: 9 10 11 12, on right: 8
method_args (57)
    on left: 13 14 15, on right: 8 14
method_arg (58)
    on left: 16 17 18, on right: 14 15
block (59)
    on left: 19 20, on right: 8 26 27 28 33 34 35
statements (60)
    on left: 21 22, on right: 19 20 21
statement (61)
    on left: 23 24 25 26 27 28 29 30 31 32 33, on right: 21 22
if_else_statment (62)
    on left: 34 35, on right: 25
method_call (63)
    on left: 36 37, on right: 24 41
callout_args (64)
    on left: 38 39, on right: 37 38
expr (65)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
    58, on right: 23 26 27 28 30 34 35 38 39 43 44 45 46 47 48 49 50
    51 52 53 54 55 56 57 58 60 61
location (66)
    on left: 59 60 61, on right: 5 23 40
literal (67)
    on left: 62 63 64 65, on right: 42
bool_literal (68)
    on left: 66 67, on right: 64
type (69)
    on left: 68 69 70 71, on right: 5 10 11 12 16 17 18


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | CLASS . PROGRAM OPEN_CURLY method_decls CLOSE_CURLY

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | CLASS PROGRAM . OPEN_CURLY method_decls CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OPEN_CURLY . var_decls method_decls CLOSE_CURLY
    2        | CLASS PROGRAM OPEN_CURLY . method_decls CLOSE_CURLY

    BOOL     shift, and go to state 6
    CHAR     shift, and go to state 7
    DECLARE  shift, and go to state 8
    INT      shift, and go to state 9
    UINT     shift, and go to state 10
    VOID     shift, and go to state 11

    var_decls     go to state 12
    var_decl      go to state 13
    method_decls  go to state 14
    method_decl   go to state 15
    return_type   go to state 16
    type          go to state 17


State 6

   70 type: BOOL .

    $default  reduce using rule 70 (type)


State 7

   71 type: CHAR .

    $default  reduce using rule 71 (type)


State 8

    5 var_decl: DECLARE . type location SEMICOLON

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10

    type  go to state 18


State 9

   68 type: INT .

    $default  reduce using rule 68 (type)


State 10

   69 type: UINT .

    $default  reduce using rule 69 (type)


State 11

    9 return_type: VOID .

    $default  reduce using rule 9 (return_type)


State 12

    1 program: CLASS PROGRAM OPEN_CURLY var_decls . method_decls CLOSE_CURLY

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 11

    method_decls  go to state 19
    method_decl   go to state 15
    return_type   go to state 16
    type          go to state 17


State 13

    3 var_decls: var_decl . var_decls
    4          | var_decl .

    DECLARE  shift, and go to state 8

    $default  reduce using rule 4 (var_decls)

    var_decls  go to state 20
    var_decl   go to state 13


State 14

    2 program: CLASS PROGRAM OPEN_CURLY method_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 21


State 15

    6 method_decls: method_decl . method_decls
    7             | method_decl .

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 11

    $default  reduce using rule 7 (method_decls)

    method_decls  go to state 22
    method_decl   go to state 15
    return_type   go to state 16
    type          go to state 17


State 16

    8 method_decl: return_type . ID OPEN_PARAN method_args CLOSE_PARAN block

    ID  shift, and go to state 23


State 17

   10 return_type: type .
   11            | type . OPEN_ANG INT_LITERAL CLOSE_ANG
   12            | type . OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 24

    $default  reduce using rule 10 (return_type)


State 18

    5 var_decl: DECLARE type . location SEMICOLON

    ID  shift, and go to state 25

    location  go to state 26


State 19

    1 program: CLASS PROGRAM OPEN_CURLY var_decls method_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 27


State 20

    3 var_decls: var_decl var_decls .

    $default  reduce using rule 3 (var_decls)


State 21

    2 program: CLASS PROGRAM OPEN_CURLY method_decls CLOSE_CURLY .

    $default  reduce using rule 2 (program)


State 22

    6 method_decls: method_decl method_decls .

    $default  reduce using rule 6 (method_decls)


State 23

    8 method_decl: return_type ID . OPEN_PARAN method_args CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 28


State 24

   11 return_type: type OPEN_ANG . INT_LITERAL CLOSE_ANG
   12            | type OPEN_ANG . INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 29


State 25

   59 location: ID .
   60         | ID . OPEN_ANG expr CLOSE_ANG
   61         | ID . OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    OPEN_ANG  shift, and go to state 30

    $default  reduce using rule 59 (location)


State 26

    5 var_decl: DECLARE type location . SEMICOLON

    SEMICOLON  shift, and go to state 31


State 27

    1 program: CLASS PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY .

    $default  reduce using rule 1 (program)


State 28

    8 method_decl: return_type ID OPEN_PARAN . method_args CLOSE_PARAN block

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 32

    method_args  go to state 33
    method_arg   go to state 34
    type         go to state 35


State 29

   11 return_type: type OPEN_ANG INT_LITERAL . CLOSE_ANG
   12            | type OPEN_ANG INT_LITERAL . CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    CLOSE_ANG  shift, and go to state 36


State 30

   60 location: ID OPEN_ANG . expr CLOSE_ANG
   61         | ID OPEN_ANG . expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 47
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 31

    5 var_decl: DECLARE type location SEMICOLON .

    $default  reduce using rule 5 (var_decl)


State 32

   13 method_args: VOID .

    $default  reduce using rule 13 (method_args)


State 33

    8 method_decl: return_type ID OPEN_PARAN method_args . CLOSE_PARAN block

    CLOSE_PARAN  shift, and go to state 51


State 34

   14 method_args: method_arg . COMMA method_args
   15            | method_arg .

    COMMA  shift, and go to state 52

    $default  reduce using rule 15 (method_args)


State 35

   16 method_arg: type . ID
   17           | type . ID OPEN_ANG INT_LITERAL CLOSE_ANG
   18           | type . ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    ID  shift, and go to state 53


State 36

   11 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG .
   12            | type OPEN_ANG INT_LITERAL CLOSE_ANG . OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 54

    $default  reduce using rule 11 (return_type)


State 37

   36 method_call: CALLOUT . OPEN_PARAN STRING_LITERAL CLOSE_PARAN
   37            | CALLOUT . OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN

    OPEN_PARAN  shift, and go to state 55


State 38

   63 literal: CHAR_LITERAL .

    $default  reduce using rule 63 (literal)


State 39

   67 bool_literal: FALSE .

    $default  reduce using rule 67 (bool_literal)


State 40

   62 literal: INT_LITERAL .

    $default  reduce using rule 62 (literal)


State 41

   58 expr: OPEN_PARAN . expr CLOSE_PARAN

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 56
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 42

   65 literal: STRING_LITERAL .

    $default  reduce using rule 65 (literal)


State 43

   66 bool_literal: TRUE .

    $default  reduce using rule 66 (bool_literal)


State 44

   56 expr: SUB . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 57
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 45

   57 expr: LOGICAL_NOT . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 58
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 46

   41 expr: method_call .

    $default  reduce using rule 41 (expr)


State 47

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr
   60 location: ID OPEN_ANG expr . CLOSE_ANG
   61         | ID OPEN_ANG expr . CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    CLOSE_ANG    shift, and go to state 59
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 48

   40 expr: location .

    $default  reduce using rule 40 (expr)


State 49

   42 expr: literal .

    $default  reduce using rule 42 (expr)


State 50

   64 literal: bool_literal .

    $default  reduce using rule 64 (literal)


State 51

    8 method_decl: return_type ID OPEN_PARAN method_args CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 74


State 52

   14 method_args: method_arg COMMA . method_args

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 32

    method_args  go to state 75
    method_arg   go to state 34
    type         go to state 35


State 53

   16 method_arg: type ID .
   17           | type ID . OPEN_ANG INT_LITERAL CLOSE_ANG
   18           | type ID . OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 76

    $default  reduce using rule 16 (method_arg)


State 54

   12 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG . INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 77


State 55

   36 method_call: CALLOUT OPEN_PARAN . STRING_LITERAL CLOSE_PARAN
   37            | CALLOUT OPEN_PARAN . STRING_LITERAL COMMA callout_args CLOSE_PARAN

    STRING_LITERAL  shift, and go to state 78


State 56

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr
   58     | OPEN_PARAN expr . CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 57

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr
   56     | SUB expr .

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    $default  reduce using rule 56 (expr)


State 58

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr
   57     | LOGICAL_NOT expr .

    $default  reduce using rule 57 (expr)


State 59

   60 location: ID OPEN_ANG expr CLOSE_ANG .
   61         | ID OPEN_ANG expr CLOSE_ANG . OPEN_ANG expr CLOSE_ANG

    OPEN_ANG  shift, and go to state 80

    $default  reduce using rule 60 (location)


State 60

   54 expr: expr LOGICAL_OR . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 81
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 61

   55 expr: expr LOGICAL_AND . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 82
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 62

   52 expr: expr EQUALITY . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 83
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 63

   53 expr: expr NONEQUALITY . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 84
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 64

   50 expr: expr LESSTHAN . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 85
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 65

   51 expr: expr GREATERTHAN . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 86
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 66

   48 expr: expr LEQ . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 87
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 67

   49 expr: expr GEQ . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 88
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 68

   44 expr: expr SUB . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 89
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 69

   43 expr: expr ADD . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 90
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 70

   45 expr: expr MULTIPLY . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 91
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 71

   46 expr: expr DIVIDE . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 92
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 72

   47 expr: expr MODULO . expr

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 93
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 73

   19 block: OPEN_CURLY . var_decls statements CLOSE_CURLY
   20      | OPEN_CURLY . statements CLOSE_CURLY

    BREAK           shift, and go to state 94
    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    CONTINUE        shift, and go to state 95
    DECLARE         shift, and go to state 8
    FALSE           shift, and go to state 39
    FOR             shift, and go to state 96
    ID              shift, and go to state 25
    IF              shift, and go to state 97
    INT_LITERAL     shift, and go to state 40
    OPEN_CURLY      shift, and go to state 73
    OPEN_PARAN      shift, and go to state 41
    RETURN          shift, and go to state 98
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    WHILE           shift, and go to state 99
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    var_decls         go to state 100
    var_decl          go to state 13
    block             go to state 101
    statements        go to state 102
    statement         go to state 103
    if_else_statment  go to state 104
    method_call       go to state 105
    expr              go to state 106
    location          go to state 107
    literal           go to state 49
    bool_literal      go to state 50


State 74

    8 method_decl: return_type ID OPEN_PARAN method_args CLOSE_PARAN block .

    $default  reduce using rule 8 (method_decl)


State 75

   14 method_args: method_arg COMMA method_args .

    $default  reduce using rule 14 (method_args)


State 76

   17 method_arg: type ID OPEN_ANG . INT_LITERAL CLOSE_ANG
   18           | type ID OPEN_ANG . INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 108


State 77

   12 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL . CLOSE_ANG

    CLOSE_ANG  shift, and go to state 109


State 78

   36 method_call: CALLOUT OPEN_PARAN STRING_LITERAL . CLOSE_PARAN
   37            | CALLOUT OPEN_PARAN STRING_LITERAL . COMMA callout_args CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 110
    COMMA        shift, and go to state 111


State 79

   58 expr: OPEN_PARAN expr CLOSE_PARAN .

    $default  reduce using rule 58 (expr)


State 80

   61 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG . expr CLOSE_ANG

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 112
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 81

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   54     | expr LOGICAL_OR expr .
   55     | expr . LOGICAL_AND expr

    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72

    $default  reduce using rule 54 (expr)


State 82

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr
   55     | expr LOGICAL_AND expr .

    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72

    $default  reduce using rule 55 (expr)


State 83

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   52     | expr EQUALITY expr .
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 52 (expr)


State 84

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   53     | expr NONEQUALITY expr .
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 53 (expr)


State 85

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   50     | expr LESSTHAN expr .
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 50 (expr)


State 86

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   51     | expr GREATERTHAN expr .
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 51 (expr)


State 87

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   48     | expr LEQ expr .
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 48 (expr)


State 88

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   49     | expr GEQ expr .
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 49 (expr)


State 89

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   44     | expr SUB expr .
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 68
    ADD       shift, and go to state 69
    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    $default  reduce using rule 44 (expr)


State 90

   43 expr: expr . ADD expr
   43     | expr ADD expr .
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    MULTIPLY  shift, and go to state 70
    DIVIDE    shift, and go to state 71
    MODULO    shift, and go to state 72

    $default  reduce using rule 43 (expr)


State 91

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   45     | expr MULTIPLY expr .
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    $default  reduce using rule 45 (expr)


State 92

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   46     | expr DIVIDE expr .
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    $default  reduce using rule 46 (expr)


State 93

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   47     | expr MODULO expr .
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    $default  reduce using rule 47 (expr)


State 94

   31 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 113


State 95

   32 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 114


State 96

   28 statement: FOR . OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 115


State 97

   34 if_else_statment: IF . OPEN_PARAN expr CLOSE_PARAN block
   35                 | IF . OPEN_PARAN expr CLOSE_PARAN block ELSE block

    OPEN_PARAN  shift, and go to state 116


State 98

   29 statement: RETURN . SEMICOLON
   30          | RETURN . OPEN_PARAN expr CLOSE_PARAN SEMICOLON

    OPEN_PARAN  shift, and go to state 117
    SEMICOLON   shift, and go to state 118


State 99

   27 statement: WHILE . OPEN_PARAN expr CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 119


State 100

   19 block: OPEN_CURLY var_decls . statements CLOSE_CURLY

    BREAK           shift, and go to state 94
    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    CONTINUE        shift, and go to state 95
    FALSE           shift, and go to state 39
    FOR             shift, and go to state 96
    ID              shift, and go to state 25
    IF              shift, and go to state 97
    INT_LITERAL     shift, and go to state 40
    OPEN_CURLY      shift, and go to state 73
    OPEN_PARAN      shift, and go to state 41
    RETURN          shift, and go to state 98
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    WHILE           shift, and go to state 99
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    block             go to state 101
    statements        go to state 120
    statement         go to state 103
    if_else_statment  go to state 104
    method_call       go to state 105
    expr              go to state 106
    location          go to state 107
    literal           go to state 49
    bool_literal      go to state 50


State 101

   33 statement: block .

    $default  reduce using rule 33 (statement)


State 102

   20 block: OPEN_CURLY statements . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 121


State 103

   21 statements: statement . statements
   22           | statement .

    BREAK           shift, and go to state 94
    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    CONTINUE        shift, and go to state 95
    FALSE           shift, and go to state 39
    FOR             shift, and go to state 96
    ID              shift, and go to state 25
    IF              shift, and go to state 97
    INT_LITERAL     shift, and go to state 40
    OPEN_CURLY      shift, and go to state 73
    OPEN_PARAN      shift, and go to state 41
    RETURN          shift, and go to state 98
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    WHILE           shift, and go to state 99
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    $default  reduce using rule 22 (statements)

    block             go to state 101
    statements        go to state 122
    statement         go to state 103
    if_else_statment  go to state 104
    method_call       go to state 105
    expr              go to state 106
    location          go to state 107
    literal           go to state 49
    bool_literal      go to state 50


State 104

   25 statement: if_else_statment .

    $default  reduce using rule 25 (statement)


State 105

   24 statement: method_call . SEMICOLON
   41 expr: method_call .

    SEMICOLON  shift, and go to state 123

    $default  reduce using rule 41 (expr)


State 106

   26 statement: expr . QM block COLON block
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    QM           shift, and go to state 124
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 107

   23 statement: location . ASSIGN expr SEMICOLON
   40 expr: location .

    ASSIGN  shift, and go to state 125

    $default  reduce using rule 40 (expr)


State 108

   17 method_arg: type ID OPEN_ANG INT_LITERAL . CLOSE_ANG
   18           | type ID OPEN_ANG INT_LITERAL . CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    CLOSE_ANG  shift, and go to state 126


State 109

   12 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG .

    $default  reduce using rule 12 (return_type)


State 110

   36 method_call: CALLOUT OPEN_PARAN STRING_LITERAL CLOSE_PARAN .

    $default  reduce using rule 36 (method_call)


State 111

   37 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA . callout_args CLOSE_PARAN

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    callout_args  go to state 127
    expr          go to state 128
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 112

   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr
   61 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr . CLOSE_ANG

    CLOSE_ANG    shift, and go to state 129
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 113

   31 statement: BREAK SEMICOLON .

    $default  reduce using rule 31 (statement)


State 114

   32 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 32 (statement)


State 115

   28 statement: FOR OPEN_PARAN . ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    ID  shift, and go to state 130


State 116

   34 if_else_statment: IF OPEN_PARAN . expr CLOSE_PARAN block
   35                 | IF OPEN_PARAN . expr CLOSE_PARAN block ELSE block

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 131
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 117

   30 statement: RETURN OPEN_PARAN . expr CLOSE_PARAN SEMICOLON

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 132
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 118

   29 statement: RETURN SEMICOLON .

    $default  reduce using rule 29 (statement)


State 119

   27 statement: WHILE OPEN_PARAN . expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 133
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 120

   19 block: OPEN_CURLY var_decls statements . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 134


State 121

   20 block: OPEN_CURLY statements CLOSE_CURLY .

    $default  reduce using rule 20 (block)


State 122

   21 statements: statement statements .

    $default  reduce using rule 21 (statements)


State 123

   24 statement: method_call SEMICOLON .

    $default  reduce using rule 24 (statement)


State 124

   26 statement: expr QM . block COLON block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 135


State 125

   23 statement: location ASSIGN . expr SEMICOLON

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 136
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 126

   17 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG .
   18           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG . OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 137

    $default  reduce using rule 17 (method_arg)


State 127

   37 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args . CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 138


State 128

   38 callout_args: expr . COMMA callout_args
   39             | expr .
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    COMMA        shift, and go to state 139
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72

    $default  reduce using rule 39 (callout_args)


State 129

   61 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG .

    $default  reduce using rule 61 (location)


State 130

   28 statement: FOR OPEN_PARAN ID . ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    ASSIGN  shift, and go to state 140


State 131

   34 if_else_statment: IF OPEN_PARAN expr . CLOSE_PARAN block
   35                 | IF OPEN_PARAN expr . CLOSE_PARAN block ELSE block
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 141
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 132

   30 statement: RETURN OPEN_PARAN expr . CLOSE_PARAN SEMICOLON
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 142
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 133

   27 statement: WHILE OPEN_PARAN expr . CLOSE_PARAN block
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 143
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 134

   19 block: OPEN_CURLY var_decls statements CLOSE_CURLY .

    $default  reduce using rule 19 (block)


State 135

   26 statement: expr QM block . COLON block

    COLON  shift, and go to state 144


State 136

   23 statement: location ASSIGN expr . SEMICOLON
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 145
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 137

   18 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG . INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 146


State 138

   37 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN .

    $default  reduce using rule 37 (method_call)


State 139

   38 callout_args: expr COMMA . callout_args

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    callout_args  go to state 147
    expr          go to state 128
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 140

   28 statement: FOR OPEN_PARAN ID ASSIGN . expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 148
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 141

   34 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN . block
   35                 | IF OPEN_PARAN expr CLOSE_PARAN . block ELSE block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 149


State 142

   30 statement: RETURN OPEN_PARAN expr CLOSE_PARAN . SEMICOLON

    SEMICOLON  shift, and go to state 150


State 143

   27 statement: WHILE OPEN_PARAN expr CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 151


State 144

   26 statement: expr QM block COLON . block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 152


State 145

   23 statement: location ASSIGN expr SEMICOLON .

    $default  reduce using rule 23 (statement)


State 146

   18 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL . CLOSE_ANG

    CLOSE_ANG  shift, and go to state 153


State 147

   38 callout_args: expr COMMA callout_args .

    $default  reduce using rule 38 (callout_args)


State 148

   28 statement: FOR OPEN_PARAN ID ASSIGN expr . SEMICOLON expr SEMICOLON expr CLOSE_PARAN block
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 154
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 149

   34 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block .
   35                 | IF OPEN_PARAN expr CLOSE_PARAN block . ELSE block

    ELSE  shift, and go to state 155

    $default  reduce using rule 34 (if_else_statment)


State 150

   30 statement: RETURN OPEN_PARAN expr CLOSE_PARAN SEMICOLON .

    $default  reduce using rule 30 (statement)


State 151

   27 statement: WHILE OPEN_PARAN expr CLOSE_PARAN block .

    $default  reduce using rule 27 (statement)


State 152

   26 statement: expr QM block COLON block .

    $default  reduce using rule 26 (statement)


State 153

   18 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG .

    $default  reduce using rule 18 (method_arg)


State 154

   28 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON . expr SEMICOLON expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 156
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 155

   35 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block ELSE . block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 157


State 156

   28 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr . SEMICOLON expr CLOSE_PARAN block
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 158
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 157

   35 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block ELSE block .

    $default  reduce using rule 35 (if_else_statment)


State 158

   28 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON . expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 37
    CHAR_LITERAL    shift, and go to state 38
    FALSE           shift, and go to state 39
    ID              shift, and go to state 25
    INT_LITERAL     shift, and go to state 40
    OPEN_PARAN      shift, and go to state 41
    STRING_LITERAL  shift, and go to state 42
    TRUE            shift, and go to state 43
    SUB             shift, and go to state 44
    LOGICAL_NOT     shift, and go to state 45

    method_call   go to state 46
    expr          go to state 159
    location      go to state 48
    literal       go to state 49
    bool_literal  go to state 50


State 159

   28 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr . CLOSE_PARAN block
   43 expr: expr . ADD expr
   44     | expr . SUB expr
   45     | expr . MULTIPLY expr
   46     | expr . DIVIDE expr
   47     | expr . MODULO expr
   48     | expr . LEQ expr
   49     | expr . GEQ expr
   50     | expr . LESSTHAN expr
   51     | expr . GREATERTHAN expr
   52     | expr . EQUALITY expr
   53     | expr . NONEQUALITY expr
   54     | expr . LOGICAL_OR expr
   55     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 160
    LOGICAL_OR   shift, and go to state 60
    LOGICAL_AND  shift, and go to state 61
    EQUALITY     shift, and go to state 62
    NONEQUALITY  shift, and go to state 63
    LESSTHAN     shift, and go to state 64
    GREATERTHAN  shift, and go to state 65
    LEQ          shift, and go to state 66
    GEQ          shift, and go to state 67
    SUB          shift, and go to state 68
    ADD          shift, and go to state 69
    MULTIPLY     shift, and go to state 70
    DIVIDE       shift, and go to state 71
    MODULO       shift, and go to state 72


State 160

   28 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 73

    block  go to state 161


State 161

   28 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block .

    $default  reduce using rule 28 (statement)
