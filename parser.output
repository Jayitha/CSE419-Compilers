Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | CLASS PROGRAM OPEN_CURLY method_decls CLOSE_CURLY
    3        | CLASS PROGRAM OPEN_CURLY var_decls CLOSE_CURLY

    4 var_decls: var_decl var_decls
    5          | var_decl

    6 var_decl: DECLARE type location SEMICOLON

    7 method_decls: method_decl method_decls
    8             | method_decl

    9 method_decl: return_type ID OPEN_PARAN method_args CLOSE_PARAN block

   10 return_type: VOID
   11            | type
   12            | type OPEN_ANG INT_LITERAL CLOSE_ANG
   13            | type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

   14 method_args: VOID
   15            | method_arg COMMA method_args
   16            | method_arg

   17 method_arg: type ID
   18           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG
   19           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

   20 block: OPEN_CURLY var_decls statements CLOSE_CURLY
   21      | OPEN_CURLY statements CLOSE_CURLY
   22      | OPEN_CURLY var_decls CLOSE_CURLY

   23 statements: statement statements
   24           | statement

   25 statement: location ASSIGN expr SEMICOLON
   26          | method_call SEMICOLON
   27          | if_else_statment
   28          | expr QM block COLON block
   29          | WHILE OPEN_PARAN expr CLOSE_PARAN block
   30          | FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block
   31          | RETURN SEMICOLON
   32          | RETURN OPEN_PARAN expr CLOSE_PARAN SEMICOLON
   33          | BREAK SEMICOLON
   34          | CONTINUE SEMICOLON

   35 @1: %empty

   36 statement: block @1

   37 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block
   38                 | IF OPEN_PARAN expr CLOSE_PARAN block ELSE block

   39 method_call: CALLOUT OPEN_PARAN STRING_LITERAL CLOSE_PARAN
   40            | CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN

   41 callout_args: expr COMMA callout_args
   42             | expr

   43 expr: location
   44     | method_call
   45     | literal
   46     | expr ADD expr
   47     | expr SUB expr
   48     | expr MULTIPLY expr
   49     | expr DIVIDE expr
   50     | expr MODULO expr
   51     | expr LEQ expr
   52     | expr GEQ expr
   53     | expr LESSTHAN expr
   54     | expr GREATERTHAN expr
   55     | expr EQUALITY expr
   56     | expr NONEQUALITY expr
   57     | expr LOGICAL_OR expr
   58     | expr LOGICAL_AND expr
   59     | SUB expr
   60     | LOGICAL_NOT expr
   61     | OPEN_PARAN expr CLOSE_PARAN

   62 location: ID
   63         | ID OPEN_ANG expr CLOSE_ANG
   64         | ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

   65 literal: INT_LITERAL
   66        | CHAR_LITERAL
   67        | bool_literal
   68        | STRING_LITERAL

   69 bool_literal: TRUE
   70             | FALSE

   71 type: INT
   72     | UINT
   73     | BOOL
   74     | CHAR


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 25 30
BOOL (259) 73
BREAK (260) 33
CALLOUT (261) 39 40
CHAR (262) 74
CHAR_LITERAL (263) 66
CLASS (264) 1 2 3
CLOSE_ANG (265) 12 13 18 19 63 64
CLOSE_CURLY (266) 1 2 3 20 21 22
CLOSE_PARAN (267) 9 29 30 32 37 38 39 40 61
COLON (268) 28
COMMA (269) 15 40 41
CONTINUE (270) 34
DECLARE (271) 6
ELSE (272) 38
FALSE (273) 70
FOR (274) 30
ID (275) 9 17 18 19 30 62 63 64
IF (276) 37 38
INT (277) 71
INT_LITERAL (278) 12 13 18 19 65
OPEN_ANG (279) 12 13 18 19 63 64
OPEN_CURLY (280) 1 2 3 20 21 22
OPEN_PARAN (281) 9 29 30 32 37 38 39 40 61
PROGRAM (282) 1 2 3
QM (283) 28
RETURN (284) 31 32
STRING_LITERAL (285) 39 40 68
SEMICOLON (286) 6 25 26 30 31 32 33 34
TRUE (287) 69
UINT (288) 72
VOID (289) 10 14
WHILE (290) 29
LOGICAL_OR (291) 57
LOGICAL_AND (292) 58
EQUALITY (293) 55
NONEQUALITY (294) 56
LESSTHAN (295) 53
GREATERTHAN (296) 54
LEQ (297) 51
GEQ (298) 52
SUB (299) 47 59
ADD (300) 46
MULTIPLY (301) 48
DIVIDE (302) 49
MODULO (303) 50
LOGICAL_NOT (304) 60


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2 3, on right: 0
var_decls (52)
    on left: 4 5, on right: 1 3 4 20 22
var_decl (53)
    on left: 6, on right: 4 5
method_decls (54)
    on left: 7 8, on right: 1 2 7
method_decl (55)
    on left: 9, on right: 7 8
return_type (56)
    on left: 10 11 12 13, on right: 9
method_args (57)
    on left: 14 15 16, on right: 9 15
method_arg (58)
    on left: 17 18 19, on right: 15 16
block (59)
    on left: 20 21 22, on right: 9 28 29 30 36 37 38
statements (60)
    on left: 23 24, on right: 20 21 23
statement (61)
    on left: 25 26 27 28 29 30 31 32 33 34 36, on right: 23 24
@1 (62)
    on left: 35, on right: 36
if_else_statment (63)
    on left: 37 38, on right: 27
method_call (64)
    on left: 39 40, on right: 26 44
callout_args (65)
    on left: 41 42, on right: 40 41
expr (66)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61, on right: 25 28 29 30 32 37 38 41 42 46 47 48 49 50 51 52 53
    54 55 56 57 58 59 60 61 63 64
location (67)
    on left: 62 63 64, on right: 6 25 43
literal (68)
    on left: 65 66 67 68, on right: 45
bool_literal (69)
    on left: 69 70, on right: 67
type (70)
    on left: 71 72 73 74, on right: 6 11 12 13 17 18 19


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | CLASS . PROGRAM OPEN_CURLY method_decls CLOSE_CURLY
    3        | CLASS . PROGRAM OPEN_CURLY var_decls CLOSE_CURLY

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | CLASS PROGRAM . OPEN_CURLY method_decls CLOSE_CURLY
    3        | CLASS PROGRAM . OPEN_CURLY var_decls CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OPEN_CURLY . var_decls method_decls CLOSE_CURLY
    2        | CLASS PROGRAM OPEN_CURLY . method_decls CLOSE_CURLY
    3        | CLASS PROGRAM OPEN_CURLY . var_decls CLOSE_CURLY

    BOOL     shift, and go to state 6
    CHAR     shift, and go to state 7
    DECLARE  shift, and go to state 8
    INT      shift, and go to state 9
    UINT     shift, and go to state 10
    VOID     shift, and go to state 11

    var_decls     go to state 12
    var_decl      go to state 13
    method_decls  go to state 14
    method_decl   go to state 15
    return_type   go to state 16
    type          go to state 17


State 6

   73 type: BOOL .

    $default  reduce using rule 73 (type)


State 7

   74 type: CHAR .

    $default  reduce using rule 74 (type)


State 8

    6 var_decl: DECLARE . type location SEMICOLON

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10

    type  go to state 18


State 9

   71 type: INT .

    $default  reduce using rule 71 (type)


State 10

   72 type: UINT .

    $default  reduce using rule 72 (type)


State 11

   10 return_type: VOID .

    $default  reduce using rule 10 (return_type)


State 12

    1 program: CLASS PROGRAM OPEN_CURLY var_decls . method_decls CLOSE_CURLY
    3        | CLASS PROGRAM OPEN_CURLY var_decls . CLOSE_CURLY

    BOOL         shift, and go to state 6
    CHAR         shift, and go to state 7
    CLOSE_CURLY  shift, and go to state 19
    INT          shift, and go to state 9
    UINT         shift, and go to state 10
    VOID         shift, and go to state 11

    method_decls  go to state 20
    method_decl   go to state 15
    return_type   go to state 16
    type          go to state 17


State 13

    4 var_decls: var_decl . var_decls
    5          | var_decl .

    DECLARE  shift, and go to state 8

    $default  reduce using rule 5 (var_decls)

    var_decls  go to state 21
    var_decl   go to state 13


State 14

    2 program: CLASS PROGRAM OPEN_CURLY method_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 22


State 15

    7 method_decls: method_decl . method_decls
    8             | method_decl .

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 11

    $default  reduce using rule 8 (method_decls)

    method_decls  go to state 23
    method_decl   go to state 15
    return_type   go to state 16
    type          go to state 17


State 16

    9 method_decl: return_type . ID OPEN_PARAN method_args CLOSE_PARAN block

    ID  shift, and go to state 24


State 17

   11 return_type: type .
   12            | type . OPEN_ANG INT_LITERAL CLOSE_ANG
   13            | type . OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 25

    $default  reduce using rule 11 (return_type)


State 18

    6 var_decl: DECLARE type . location SEMICOLON

    ID  shift, and go to state 26

    location  go to state 27


State 19

    3 program: CLASS PROGRAM OPEN_CURLY var_decls CLOSE_CURLY .

    $default  reduce using rule 3 (program)


State 20

    1 program: CLASS PROGRAM OPEN_CURLY var_decls method_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 28


State 21

    4 var_decls: var_decl var_decls .

    $default  reduce using rule 4 (var_decls)


State 22

    2 program: CLASS PROGRAM OPEN_CURLY method_decls CLOSE_CURLY .

    $default  reduce using rule 2 (program)


State 23

    7 method_decls: method_decl method_decls .

    $default  reduce using rule 7 (method_decls)


State 24

    9 method_decl: return_type ID . OPEN_PARAN method_args CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 29


State 25

   12 return_type: type OPEN_ANG . INT_LITERAL CLOSE_ANG
   13            | type OPEN_ANG . INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 30


State 26

   62 location: ID .
   63         | ID . OPEN_ANG expr CLOSE_ANG
   64         | ID . OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    OPEN_ANG  shift, and go to state 31

    $default  reduce using rule 62 (location)


State 27

    6 var_decl: DECLARE type location . SEMICOLON

    SEMICOLON  shift, and go to state 32


State 28

    1 program: CLASS PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY .

    $default  reduce using rule 1 (program)


State 29

    9 method_decl: return_type ID OPEN_PARAN . method_args CLOSE_PARAN block

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 33

    method_args  go to state 34
    method_arg   go to state 35
    type         go to state 36


State 30

   12 return_type: type OPEN_ANG INT_LITERAL . CLOSE_ANG
   13            | type OPEN_ANG INT_LITERAL . CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    CLOSE_ANG  shift, and go to state 37


State 31

   63 location: ID OPEN_ANG . expr CLOSE_ANG
   64         | ID OPEN_ANG . expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 48
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 32

    6 var_decl: DECLARE type location SEMICOLON .

    $default  reduce using rule 6 (var_decl)


State 33

   14 method_args: VOID .

    $default  reduce using rule 14 (method_args)


State 34

    9 method_decl: return_type ID OPEN_PARAN method_args . CLOSE_PARAN block

    CLOSE_PARAN  shift, and go to state 52


State 35

   15 method_args: method_arg . COMMA method_args
   16            | method_arg .

    COMMA  shift, and go to state 53

    $default  reduce using rule 16 (method_args)


State 36

   17 method_arg: type . ID
   18           | type . ID OPEN_ANG INT_LITERAL CLOSE_ANG
   19           | type . ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    ID  shift, and go to state 54


State 37

   12 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG .
   13            | type OPEN_ANG INT_LITERAL CLOSE_ANG . OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 55

    $default  reduce using rule 12 (return_type)


State 38

   39 method_call: CALLOUT . OPEN_PARAN STRING_LITERAL CLOSE_PARAN
   40            | CALLOUT . OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN

    OPEN_PARAN  shift, and go to state 56


State 39

   66 literal: CHAR_LITERAL .

    $default  reduce using rule 66 (literal)


State 40

   70 bool_literal: FALSE .

    $default  reduce using rule 70 (bool_literal)


State 41

   65 literal: INT_LITERAL .

    $default  reduce using rule 65 (literal)


State 42

   61 expr: OPEN_PARAN . expr CLOSE_PARAN

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 57
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 43

   68 literal: STRING_LITERAL .

    $default  reduce using rule 68 (literal)


State 44

   69 bool_literal: TRUE .

    $default  reduce using rule 69 (bool_literal)


State 45

   59 expr: SUB . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 58
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 46

   60 expr: LOGICAL_NOT . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 59
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 47

   44 expr: method_call .

    $default  reduce using rule 44 (expr)


State 48

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr
   63 location: ID OPEN_ANG expr . CLOSE_ANG
   64         | ID OPEN_ANG expr . CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    CLOSE_ANG    shift, and go to state 60
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 49

   43 expr: location .

    $default  reduce using rule 43 (expr)


State 50

   45 expr: literal .

    $default  reduce using rule 45 (expr)


State 51

   67 literal: bool_literal .

    $default  reduce using rule 67 (literal)


State 52

    9 method_decl: return_type ID OPEN_PARAN method_args CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 75


State 53

   15 method_args: method_arg COMMA . method_args

    BOOL  shift, and go to state 6
    CHAR  shift, and go to state 7
    INT   shift, and go to state 9
    UINT  shift, and go to state 10
    VOID  shift, and go to state 33

    method_args  go to state 76
    method_arg   go to state 35
    type         go to state 36


State 54

   17 method_arg: type ID .
   18           | type ID . OPEN_ANG INT_LITERAL CLOSE_ANG
   19           | type ID . OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 77

    $default  reduce using rule 17 (method_arg)


State 55

   13 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG . INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 78


State 56

   39 method_call: CALLOUT OPEN_PARAN . STRING_LITERAL CLOSE_PARAN
   40            | CALLOUT OPEN_PARAN . STRING_LITERAL COMMA callout_args CLOSE_PARAN

    STRING_LITERAL  shift, and go to state 79


State 57

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr
   61     | OPEN_PARAN expr . CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 80
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 58

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr
   59     | SUB expr .

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 59 (expr)


State 59

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr
   60     | LOGICAL_NOT expr .

    $default  reduce using rule 60 (expr)


State 60

   63 location: ID OPEN_ANG expr CLOSE_ANG .
   64         | ID OPEN_ANG expr CLOSE_ANG . OPEN_ANG expr CLOSE_ANG

    OPEN_ANG  shift, and go to state 81

    $default  reduce using rule 63 (location)


State 61

   57 expr: expr LOGICAL_OR . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 82
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 62

   58 expr: expr LOGICAL_AND . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 83
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 63

   55 expr: expr EQUALITY . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 84
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 64

   56 expr: expr NONEQUALITY . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 85
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 65

   53 expr: expr LESSTHAN . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 86
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 66

   54 expr: expr GREATERTHAN . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 87
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 67

   51 expr: expr LEQ . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 88
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 68

   52 expr: expr GEQ . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 89
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 69

   47 expr: expr SUB . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 90
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 70

   46 expr: expr ADD . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 91
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 71

   48 expr: expr MULTIPLY . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 92
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 72

   49 expr: expr DIVIDE . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 93
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 73

   50 expr: expr MODULO . expr

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 94
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 74

   20 block: OPEN_CURLY . var_decls statements CLOSE_CURLY
   21      | OPEN_CURLY . statements CLOSE_CURLY
   22      | OPEN_CURLY . var_decls CLOSE_CURLY

    BREAK           shift, and go to state 95
    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    CONTINUE        shift, and go to state 96
    DECLARE         shift, and go to state 8
    FALSE           shift, and go to state 40
    FOR             shift, and go to state 97
    ID              shift, and go to state 26
    IF              shift, and go to state 98
    INT_LITERAL     shift, and go to state 41
    OPEN_CURLY      shift, and go to state 74
    OPEN_PARAN      shift, and go to state 42
    RETURN          shift, and go to state 99
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    WHILE           shift, and go to state 100
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    var_decls         go to state 101
    var_decl          go to state 13
    block             go to state 102
    statements        go to state 103
    statement         go to state 104
    if_else_statment  go to state 105
    method_call       go to state 106
    expr              go to state 107
    location          go to state 108
    literal           go to state 50
    bool_literal      go to state 51


State 75

    9 method_decl: return_type ID OPEN_PARAN method_args CLOSE_PARAN block .

    $default  reduce using rule 9 (method_decl)


State 76

   15 method_args: method_arg COMMA method_args .

    $default  reduce using rule 15 (method_args)


State 77

   18 method_arg: type ID OPEN_ANG . INT_LITERAL CLOSE_ANG
   19           | type ID OPEN_ANG . INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 109


State 78

   13 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL . CLOSE_ANG

    CLOSE_ANG  shift, and go to state 110


State 79

   39 method_call: CALLOUT OPEN_PARAN STRING_LITERAL . CLOSE_PARAN
   40            | CALLOUT OPEN_PARAN STRING_LITERAL . COMMA callout_args CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 111
    COMMA        shift, and go to state 112


State 80

   61 expr: OPEN_PARAN expr CLOSE_PARAN .

    $default  reduce using rule 61 (expr)


State 81

   64 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG . expr CLOSE_ANG

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 113
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 82

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   57     | expr LOGICAL_OR expr .
   58     | expr . LOGICAL_AND expr

    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73

    $default  reduce using rule 57 (expr)


State 83

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr
   58     | expr LOGICAL_AND expr .

    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73

    $default  reduce using rule 58 (expr)


State 84

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   55     | expr EQUALITY expr .
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 55 (expr)


State 85

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   56     | expr NONEQUALITY expr .
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 56 (expr)


State 86

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   53     | expr LESSTHAN expr .
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 53 (expr)


State 87

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   54     | expr GREATERTHAN expr .
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 54 (expr)


State 88

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   51     | expr LEQ expr .
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 51 (expr)


State 89

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   52     | expr GEQ expr .
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 52 (expr)


State 90

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   47     | expr SUB expr .
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 69
    ADD       shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 47 (expr)


State 91

   46 expr: expr . ADD expr
   46     | expr ADD expr .
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    MULTIPLY  shift, and go to state 71
    DIVIDE    shift, and go to state 72
    MODULO    shift, and go to state 73

    $default  reduce using rule 46 (expr)


State 92

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   48     | expr MULTIPLY expr .
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    $default  reduce using rule 48 (expr)


State 93

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   49     | expr DIVIDE expr .
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    $default  reduce using rule 49 (expr)


State 94

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   50     | expr MODULO expr .
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    $default  reduce using rule 50 (expr)


State 95

   33 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 114


State 96

   34 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 115


State 97

   30 statement: FOR . OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 116


State 98

   37 if_else_statment: IF . OPEN_PARAN expr CLOSE_PARAN block
   38                 | IF . OPEN_PARAN expr CLOSE_PARAN block ELSE block

    OPEN_PARAN  shift, and go to state 117


State 99

   31 statement: RETURN . SEMICOLON
   32          | RETURN . OPEN_PARAN expr CLOSE_PARAN SEMICOLON

    OPEN_PARAN  shift, and go to state 118
    SEMICOLON   shift, and go to state 119


State 100

   29 statement: WHILE . OPEN_PARAN expr CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 120


State 101

   20 block: OPEN_CURLY var_decls . statements CLOSE_CURLY
   22      | OPEN_CURLY var_decls . CLOSE_CURLY

    BREAK           shift, and go to state 95
    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    CLOSE_CURLY     shift, and go to state 121
    CONTINUE        shift, and go to state 96
    FALSE           shift, and go to state 40
    FOR             shift, and go to state 97
    ID              shift, and go to state 26
    IF              shift, and go to state 98
    INT_LITERAL     shift, and go to state 41
    OPEN_CURLY      shift, and go to state 74
    OPEN_PARAN      shift, and go to state 42
    RETURN          shift, and go to state 99
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    WHILE           shift, and go to state 100
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    block             go to state 102
    statements        go to state 122
    statement         go to state 104
    if_else_statment  go to state 105
    method_call       go to state 106
    expr              go to state 107
    location          go to state 108
    literal           go to state 50
    bool_literal      go to state 51


State 102

   36 statement: block . @1

    $default  reduce using rule 35 (@1)

    @1  go to state 123


State 103

   21 block: OPEN_CURLY statements . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 124


State 104

   23 statements: statement . statements
   24           | statement .

    BREAK           shift, and go to state 95
    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    CONTINUE        shift, and go to state 96
    FALSE           shift, and go to state 40
    FOR             shift, and go to state 97
    ID              shift, and go to state 26
    IF              shift, and go to state 98
    INT_LITERAL     shift, and go to state 41
    OPEN_CURLY      shift, and go to state 74
    OPEN_PARAN      shift, and go to state 42
    RETURN          shift, and go to state 99
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    WHILE           shift, and go to state 100
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    $default  reduce using rule 24 (statements)

    block             go to state 102
    statements        go to state 125
    statement         go to state 104
    if_else_statment  go to state 105
    method_call       go to state 106
    expr              go to state 107
    location          go to state 108
    literal           go to state 50
    bool_literal      go to state 51


State 105

   27 statement: if_else_statment .

    $default  reduce using rule 27 (statement)


State 106

   26 statement: method_call . SEMICOLON
   44 expr: method_call .

    SEMICOLON  shift, and go to state 126

    $default  reduce using rule 44 (expr)


State 107

   28 statement: expr . QM block COLON block
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    QM           shift, and go to state 127
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 108

   25 statement: location . ASSIGN expr SEMICOLON
   43 expr: location .

    ASSIGN  shift, and go to state 128

    $default  reduce using rule 43 (expr)


State 109

   18 method_arg: type ID OPEN_ANG INT_LITERAL . CLOSE_ANG
   19           | type ID OPEN_ANG INT_LITERAL . CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    CLOSE_ANG  shift, and go to state 129


State 110

   13 return_type: type OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG .

    $default  reduce using rule 13 (return_type)


State 111

   39 method_call: CALLOUT OPEN_PARAN STRING_LITERAL CLOSE_PARAN .

    $default  reduce using rule 39 (method_call)


State 112

   40 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA . callout_args CLOSE_PARAN

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    callout_args  go to state 130
    expr          go to state 131
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 113

   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr
   64 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr . CLOSE_ANG

    CLOSE_ANG    shift, and go to state 132
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 114

   33 statement: BREAK SEMICOLON .

    $default  reduce using rule 33 (statement)


State 115

   34 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 34 (statement)


State 116

   30 statement: FOR OPEN_PARAN . ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    ID  shift, and go to state 133


State 117

   37 if_else_statment: IF OPEN_PARAN . expr CLOSE_PARAN block
   38                 | IF OPEN_PARAN . expr CLOSE_PARAN block ELSE block

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 134
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 118

   32 statement: RETURN OPEN_PARAN . expr CLOSE_PARAN SEMICOLON

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 135
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 119

   31 statement: RETURN SEMICOLON .

    $default  reduce using rule 31 (statement)


State 120

   29 statement: WHILE OPEN_PARAN . expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 136
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 121

   22 block: OPEN_CURLY var_decls CLOSE_CURLY .

    $default  reduce using rule 22 (block)


State 122

   20 block: OPEN_CURLY var_decls statements . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 137


State 123

   36 statement: block @1 .

    $default  reduce using rule 36 (statement)


State 124

   21 block: OPEN_CURLY statements CLOSE_CURLY .

    $default  reduce using rule 21 (block)


State 125

   23 statements: statement statements .

    $default  reduce using rule 23 (statements)


State 126

   26 statement: method_call SEMICOLON .

    $default  reduce using rule 26 (statement)


State 127

   28 statement: expr QM . block COLON block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 138


State 128

   25 statement: location ASSIGN . expr SEMICOLON

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 139
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 129

   18 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG .
   19           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG . OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 140

    $default  reduce using rule 18 (method_arg)


State 130

   40 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args . CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 141


State 131

   41 callout_args: expr . COMMA callout_args
   42             | expr .
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    COMMA        shift, and go to state 142
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73

    $default  reduce using rule 42 (callout_args)


State 132

   64 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG .

    $default  reduce using rule 64 (location)


State 133

   30 statement: FOR OPEN_PARAN ID . ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    ASSIGN  shift, and go to state 143


State 134

   37 if_else_statment: IF OPEN_PARAN expr . CLOSE_PARAN block
   38                 | IF OPEN_PARAN expr . CLOSE_PARAN block ELSE block
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 144
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 135

   32 statement: RETURN OPEN_PARAN expr . CLOSE_PARAN SEMICOLON
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 145
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 136

   29 statement: WHILE OPEN_PARAN expr . CLOSE_PARAN block
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 146
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 137

   20 block: OPEN_CURLY var_decls statements CLOSE_CURLY .

    $default  reduce using rule 20 (block)


State 138

   28 statement: expr QM block . COLON block

    COLON  shift, and go to state 147


State 139

   25 statement: location ASSIGN expr . SEMICOLON
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 148
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 140

   19 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG . INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 149


State 141

   40 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN .

    $default  reduce using rule 40 (method_call)


State 142

   41 callout_args: expr COMMA . callout_args

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    callout_args  go to state 150
    expr          go to state 131
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 143

   30 statement: FOR OPEN_PARAN ID ASSIGN . expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 151
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 144

   37 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN . block
   38                 | IF OPEN_PARAN expr CLOSE_PARAN . block ELSE block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 152


State 145

   32 statement: RETURN OPEN_PARAN expr CLOSE_PARAN . SEMICOLON

    SEMICOLON  shift, and go to state 153


State 146

   29 statement: WHILE OPEN_PARAN expr CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 154


State 147

   28 statement: expr QM block COLON . block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 155


State 148

   25 statement: location ASSIGN expr SEMICOLON .

    $default  reduce using rule 25 (statement)


State 149

   19 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL . CLOSE_ANG

    CLOSE_ANG  shift, and go to state 156


State 150

   41 callout_args: expr COMMA callout_args .

    $default  reduce using rule 41 (callout_args)


State 151

   30 statement: FOR OPEN_PARAN ID ASSIGN expr . SEMICOLON expr SEMICOLON expr CLOSE_PARAN block
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 157
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 152

   37 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block .
   38                 | IF OPEN_PARAN expr CLOSE_PARAN block . ELSE block

    ELSE  shift, and go to state 158

    $default  reduce using rule 37 (if_else_statment)


State 153

   32 statement: RETURN OPEN_PARAN expr CLOSE_PARAN SEMICOLON .

    $default  reduce using rule 32 (statement)


State 154

   29 statement: WHILE OPEN_PARAN expr CLOSE_PARAN block .

    $default  reduce using rule 29 (statement)


State 155

   28 statement: expr QM block COLON block .

    $default  reduce using rule 28 (statement)


State 156

   19 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG .

    $default  reduce using rule 19 (method_arg)


State 157

   30 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON . expr SEMICOLON expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 159
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 158

   38 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block ELSE . block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 160


State 159

   30 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr . SEMICOLON expr CLOSE_PARAN block
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 161
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 160

   38 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block ELSE block .

    $default  reduce using rule 38 (if_else_statment)


State 161

   30 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON . expr CLOSE_PARAN block

    CALLOUT         shift, and go to state 38
    CHAR_LITERAL    shift, and go to state 39
    FALSE           shift, and go to state 40
    ID              shift, and go to state 26
    INT_LITERAL     shift, and go to state 41
    OPEN_PARAN      shift, and go to state 42
    STRING_LITERAL  shift, and go to state 43
    TRUE            shift, and go to state 44
    SUB             shift, and go to state 45
    LOGICAL_NOT     shift, and go to state 46

    method_call   go to state 47
    expr          go to state 162
    location      go to state 49
    literal       go to state 50
    bool_literal  go to state 51


State 162

   30 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr . CLOSE_PARAN block
   46 expr: expr . ADD expr
   47     | expr . SUB expr
   48     | expr . MULTIPLY expr
   49     | expr . DIVIDE expr
   50     | expr . MODULO expr
   51     | expr . LEQ expr
   52     | expr . GEQ expr
   53     | expr . LESSTHAN expr
   54     | expr . GREATERTHAN expr
   55     | expr . EQUALITY expr
   56     | expr . NONEQUALITY expr
   57     | expr . LOGICAL_OR expr
   58     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 163
    LOGICAL_OR   shift, and go to state 61
    LOGICAL_AND  shift, and go to state 62
    EQUALITY     shift, and go to state 63
    NONEQUALITY  shift, and go to state 64
    LESSTHAN     shift, and go to state 65
    GREATERTHAN  shift, and go to state 66
    LEQ          shift, and go to state 67
    GEQ          shift, and go to state 68
    SUB          shift, and go to state 69
    ADD          shift, and go to state 70
    MULTIPLY     shift, and go to state 71
    DIVIDE       shift, and go to state 72
    MODULO       shift, and go to state 73


State 163

   30 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 74

    block  go to state 164


State 164

   30 statement: FOR OPEN_PARAN ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARAN block .

    $default  reduce using rule 30 (statement)
