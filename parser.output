Grammar

    0 $accept: program $end

    1 program: PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | PROGRAM OPEN_CURLY method_decls CLOSE_CURLY
    3        | PROGRAM OPEN_CURLY var_decls CLOSE_CURLY

    4 var_decls: var_decl var_decls
    5          | var_decl

    6 var_decl: DECLARE type location SEMICOLON

    7 method_decls: method_decl method_decls
    8             | method_decl

    9 method_decl: ID OPEN_PARAN method_args CLOSE_PARAN block

   10 method_args: VOID
   11            | method_arg COMMA method_args
   12            | method_arg

   13 method_arg: type ID
   14           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG
   15           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

   16 block: OPEN_CURLY var_decls statements CLOSE_CURLY
   17      | OPEN_CURLY statements CLOSE_CURLY
   18      | OPEN_CURLY var_decls CLOSE_CURLY

   19 statements: statement statements
   20           | statement

   21 statement: location ASSIGN expr SEMICOLON
   22          | method_call SEMICOLON
   23          | if_else_statment
   24          | expr QM block COLON block
   25          | WHILE OPEN_PARAN expr CLOSE_PARAN block
   26          | FOR OPEN_PARAN expr SEMICOLON statement CLOSE_PARAN block
   27          | block

   28 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block
   29                 | IF OPEN_PARAN expr CLOSE_PARAN block ELSE block

   30 method_call: CALLOUT OPEN_PARAN STRING_LITERAL CLOSE_PARAN
   31            | CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN

   32 callout_args: expr COMMA callout_args
   33             | expr

   34 expr: location
   35     | literal
   36     | expr ADD expr
   37     | expr SUB expr
   38     | expr MULTIPLY expr
   39     | expr DIVIDE expr
   40     | expr MODULO expr
   41     | expr LEQ expr
   42     | expr GEQ expr
   43     | expr LESSTHAN expr
   44     | expr GREATERTHAN expr
   45     | expr EQUALITY expr
   46     | expr NONEQUALITY expr
   47     | expr LOGICAL_OR expr
   48     | expr LOGICAL_AND expr
   49     | SUB expr
   50     | LOGICAL_NOT expr
   51     | OPEN_PARAN expr CLOSE_PARAN

   52 location: ID
   53         | ID OPEN_ANG expr CLOSE_ANG
   54         | ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

   55 literal: INT_LITERAL
   56        | CHAR_LITERAL
   57        | bool_literal
   58        | STRING_LITERAL

   59 bool_literal: TRUE
   60             | FALSE

   61 type: INT
   62     | BOOL
   63     | CHAR


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 21
BOOL (259) 62
CALLOUT (260) 30 31
CHAR (261) 63
CHAR_LITERAL (262) 56
CLOSE_ANG (263) 14 15 53 54
CLOSE_CURLY (264) 1 2 3 16 17 18
CLOSE_PARAN (265) 9 25 26 28 29 30 31 51
COLON (266) 24
COMMA (267) 11 31 32
DECLARE (268) 6
ELSE (269) 29
FALSE (270) 60
FOR (271) 26
ID (272) 9 13 14 15 52 53 54
IF (273) 28 29
INT (274) 61
INT_LITERAL (275) 14 15 55
OPEN_ANG (276) 14 15 53 54
OPEN_CURLY (277) 1 2 3 16 17 18
OPEN_PARAN (278) 9 25 26 28 29 30 31 51
PROGRAM (279) 1 2 3
QM (280) 24
STRING_LITERAL (281) 30 31 58
SEMICOLON (282) 6 21 22 26
TRUE (283) 59
VOID (284) 10
WHILE (285) 25
LOGICAL_OR (286) 47
LOGICAL_AND (287) 48
EQUALITY (288) 45
NONEQUALITY (289) 46
LESSTHAN (290) 43
GREATERTHAN (291) 44
LEQ (292) 41
GEQ (293) 42
SUB (294) 37 49
ADD (295) 36
MULTIPLY (296) 38
DIVIDE (297) 39
MODULO (298) 40
LOGICAL_NOT (299) 50


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1 2 3, on right: 0
var_decls (47)
    on left: 4 5, on right: 1 3 4 16 18
var_decl (48)
    on left: 6, on right: 4 5
method_decls (49)
    on left: 7 8, on right: 1 2 7
method_decl (50)
    on left: 9, on right: 7 8
method_args (51)
    on left: 10 11 12, on right: 9 11
method_arg (52)
    on left: 13 14 15, on right: 11 12
block (53)
    on left: 16 17 18, on right: 9 24 25 26 27 28 29
statements (54)
    on left: 19 20, on right: 16 17 19
statement (55)
    on left: 21 22 23 24 25 26 27, on right: 19 20 26
if_else_statment (56)
    on left: 28 29, on right: 23
method_call (57)
    on left: 30 31, on right: 22
callout_args (58)
    on left: 32 33, on right: 31 32
expr (59)
    on left: 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51,
    on right: 21 24 25 26 28 29 32 33 36 37 38 39 40 41 42 43 44 45
    46 47 48 49 50 51 53 54
location (60)
    on left: 52 53 54, on right: 6 21 34
literal (61)
    on left: 55 56 57 58, on right: 35
bool_literal (62)
    on left: 59 60, on right: 57
type (63)
    on left: 61 62 63, on right: 6 13 14 15


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . OPEN_CURLY var_decls method_decls CLOSE_CURLY
    2        | PROGRAM . OPEN_CURLY method_decls CLOSE_CURLY
    3        | PROGRAM . OPEN_CURLY var_decls CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM OPEN_CURLY . var_decls method_decls CLOSE_CURLY
    2        | PROGRAM OPEN_CURLY . method_decls CLOSE_CURLY
    3        | PROGRAM OPEN_CURLY . var_decls CLOSE_CURLY

    DECLARE  shift, and go to state 5
    ID       shift, and go to state 6

    var_decls     go to state 7
    var_decl      go to state 8
    method_decls  go to state 9
    method_decl   go to state 10


State 4

    0 $accept: program $end .

    $default  accept


State 5

    6 var_decl: DECLARE . type location SEMICOLON

    BOOL  shift, and go to state 11
    CHAR  shift, and go to state 12
    INT   shift, and go to state 13

    type  go to state 14


State 6

    9 method_decl: ID . OPEN_PARAN method_args CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 15


State 7

    1 program: PROGRAM OPEN_CURLY var_decls . method_decls CLOSE_CURLY
    3        | PROGRAM OPEN_CURLY var_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 16
    ID           shift, and go to state 6

    method_decls  go to state 17
    method_decl   go to state 10


State 8

    4 var_decls: var_decl . var_decls
    5          | var_decl .

    DECLARE  shift, and go to state 5

    $default  reduce using rule 5 (var_decls)

    var_decls  go to state 18
    var_decl   go to state 8


State 9

    2 program: PROGRAM OPEN_CURLY method_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 19


State 10

    7 method_decls: method_decl . method_decls
    8             | method_decl .

    ID  shift, and go to state 6

    $default  reduce using rule 8 (method_decls)

    method_decls  go to state 20
    method_decl   go to state 10


State 11

   62 type: BOOL .

    $default  reduce using rule 62 (type)


State 12

   63 type: CHAR .

    $default  reduce using rule 63 (type)


State 13

   61 type: INT .

    $default  reduce using rule 61 (type)


State 14

    6 var_decl: DECLARE type . location SEMICOLON

    ID  shift, and go to state 21

    location  go to state 22


State 15

    9 method_decl: ID OPEN_PARAN . method_args CLOSE_PARAN block

    BOOL  shift, and go to state 11
    CHAR  shift, and go to state 12
    INT   shift, and go to state 13
    VOID  shift, and go to state 23

    method_args  go to state 24
    method_arg   go to state 25
    type         go to state 26


State 16

    3 program: PROGRAM OPEN_CURLY var_decls CLOSE_CURLY .

    $default  reduce using rule 3 (program)


State 17

    1 program: PROGRAM OPEN_CURLY var_decls method_decls . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 27


State 18

    4 var_decls: var_decl var_decls .

    $default  reduce using rule 4 (var_decls)


State 19

    2 program: PROGRAM OPEN_CURLY method_decls CLOSE_CURLY .

    $default  reduce using rule 2 (program)


State 20

    7 method_decls: method_decl method_decls .

    $default  reduce using rule 7 (method_decls)


State 21

   52 location: ID .
   53         | ID . OPEN_ANG expr CLOSE_ANG
   54         | ID . OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    OPEN_ANG  shift, and go to state 28

    $default  reduce using rule 52 (location)


State 22

    6 var_decl: DECLARE type location . SEMICOLON

    SEMICOLON  shift, and go to state 29


State 23

   10 method_args: VOID .

    $default  reduce using rule 10 (method_args)


State 24

    9 method_decl: ID OPEN_PARAN method_args . CLOSE_PARAN block

    CLOSE_PARAN  shift, and go to state 30


State 25

   11 method_args: method_arg . COMMA method_args
   12            | method_arg .

    COMMA  shift, and go to state 31

    $default  reduce using rule 12 (method_args)


State 26

   13 method_arg: type . ID
   14           | type . ID OPEN_ANG INT_LITERAL CLOSE_ANG
   15           | type . ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    ID  shift, and go to state 32


State 27

    1 program: PROGRAM OPEN_CURLY var_decls method_decls CLOSE_CURLY .

    $default  reduce using rule 1 (program)


State 28

   53 location: ID OPEN_ANG . expr CLOSE_ANG
   54         | ID OPEN_ANG . expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 41
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 29

    6 var_decl: DECLARE type location SEMICOLON .

    $default  reduce using rule 6 (var_decl)


State 30

    9 method_decl: ID OPEN_PARAN method_args CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 46


State 31

   11 method_args: method_arg COMMA . method_args

    BOOL  shift, and go to state 11
    CHAR  shift, and go to state 12
    INT   shift, and go to state 13
    VOID  shift, and go to state 23

    method_args  go to state 47
    method_arg   go to state 25
    type         go to state 26


State 32

   13 method_arg: type ID .
   14           | type ID . OPEN_ANG INT_LITERAL CLOSE_ANG
   15           | type ID . OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 48

    $default  reduce using rule 13 (method_arg)


State 33

   56 literal: CHAR_LITERAL .

    $default  reduce using rule 56 (literal)


State 34

   60 bool_literal: FALSE .

    $default  reduce using rule 60 (bool_literal)


State 35

   55 literal: INT_LITERAL .

    $default  reduce using rule 55 (literal)


State 36

   51 expr: OPEN_PARAN . expr CLOSE_PARAN

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 49
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 37

   58 literal: STRING_LITERAL .

    $default  reduce using rule 58 (literal)


State 38

   59 bool_literal: TRUE .

    $default  reduce using rule 59 (bool_literal)


State 39

   49 expr: SUB . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 50
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 40

   50 expr: LOGICAL_NOT . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 51
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 41

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr
   53 location: ID OPEN_ANG expr . CLOSE_ANG
   54         | ID OPEN_ANG expr . CLOSE_ANG OPEN_ANG expr CLOSE_ANG

    CLOSE_ANG    shift, and go to state 52
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 42

   34 expr: location .

    $default  reduce using rule 34 (expr)


State 43

   35 expr: literal .

    $default  reduce using rule 35 (expr)


State 44

   57 literal: bool_literal .

    $default  reduce using rule 57 (literal)


State 45

   16 block: OPEN_CURLY . var_decls statements CLOSE_CURLY
   17      | OPEN_CURLY . statements CLOSE_CURLY
   18      | OPEN_CURLY . var_decls CLOSE_CURLY

    CALLOUT         shift, and go to state 66
    CHAR_LITERAL    shift, and go to state 33
    DECLARE         shift, and go to state 5
    FALSE           shift, and go to state 34
    FOR             shift, and go to state 67
    ID              shift, and go to state 21
    IF              shift, and go to state 68
    INT_LITERAL     shift, and go to state 35
    OPEN_CURLY      shift, and go to state 45
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    WHILE           shift, and go to state 69
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    var_decls         go to state 70
    var_decl          go to state 8
    block             go to state 71
    statements        go to state 72
    statement         go to state 73
    if_else_statment  go to state 74
    method_call       go to state 75
    expr              go to state 76
    location          go to state 77
    literal           go to state 43
    bool_literal      go to state 44


State 46

    9 method_decl: ID OPEN_PARAN method_args CLOSE_PARAN block .

    $default  reduce using rule 9 (method_decl)


State 47

   11 method_args: method_arg COMMA method_args .

    $default  reduce using rule 11 (method_args)


State 48

   14 method_arg: type ID OPEN_ANG . INT_LITERAL CLOSE_ANG
   15           | type ID OPEN_ANG . INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 78


State 49

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr
   51     | OPEN_PARAN expr . CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 50

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr
   49     | SUB expr .

    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    $default  reduce using rule 49 (expr)


State 51

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr
   50     | LOGICAL_NOT expr .

    $default  reduce using rule 50 (expr)


State 52

   53 location: ID OPEN_ANG expr CLOSE_ANG .
   54         | ID OPEN_ANG expr CLOSE_ANG . OPEN_ANG expr CLOSE_ANG

    OPEN_ANG  shift, and go to state 80

    $default  reduce using rule 53 (location)


State 53

   47 expr: expr LOGICAL_OR . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 81
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 54

   48 expr: expr LOGICAL_AND . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 82
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 55

   45 expr: expr EQUALITY . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 83
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 56

   46 expr: expr NONEQUALITY . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 84
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 57

   43 expr: expr LESSTHAN . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 85
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 58

   44 expr: expr GREATERTHAN . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 86
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 59

   41 expr: expr LEQ . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 87
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 60

   42 expr: expr GEQ . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 88
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 61

   37 expr: expr SUB . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 89
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 62

   36 expr: expr ADD . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 90
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 63

   38 expr: expr MULTIPLY . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 91
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 64

   39 expr: expr DIVIDE . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 92
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 65

   40 expr: expr MODULO . expr

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 93
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 66

   30 method_call: CALLOUT . OPEN_PARAN STRING_LITERAL CLOSE_PARAN
   31            | CALLOUT . OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN

    OPEN_PARAN  shift, and go to state 94


State 67

   26 statement: FOR . OPEN_PARAN expr SEMICOLON statement CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 95


State 68

   28 if_else_statment: IF . OPEN_PARAN expr CLOSE_PARAN block
   29                 | IF . OPEN_PARAN expr CLOSE_PARAN block ELSE block

    OPEN_PARAN  shift, and go to state 96


State 69

   25 statement: WHILE . OPEN_PARAN expr CLOSE_PARAN block

    OPEN_PARAN  shift, and go to state 97


State 70

   16 block: OPEN_CURLY var_decls . statements CLOSE_CURLY
   18      | OPEN_CURLY var_decls . CLOSE_CURLY

    CALLOUT         shift, and go to state 66
    CHAR_LITERAL    shift, and go to state 33
    CLOSE_CURLY     shift, and go to state 98
    FALSE           shift, and go to state 34
    FOR             shift, and go to state 67
    ID              shift, and go to state 21
    IF              shift, and go to state 68
    INT_LITERAL     shift, and go to state 35
    OPEN_CURLY      shift, and go to state 45
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    WHILE           shift, and go to state 69
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    block             go to state 71
    statements        go to state 99
    statement         go to state 73
    if_else_statment  go to state 74
    method_call       go to state 75
    expr              go to state 76
    location          go to state 77
    literal           go to state 43
    bool_literal      go to state 44


State 71

   27 statement: block .

    $default  reduce using rule 27 (statement)


State 72

   17 block: OPEN_CURLY statements . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 100


State 73

   19 statements: statement . statements
   20           | statement .

    CALLOUT         shift, and go to state 66
    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    FOR             shift, and go to state 67
    ID              shift, and go to state 21
    IF              shift, and go to state 68
    INT_LITERAL     shift, and go to state 35
    OPEN_CURLY      shift, and go to state 45
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    WHILE           shift, and go to state 69
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    $default  reduce using rule 20 (statements)

    block             go to state 71
    statements        go to state 101
    statement         go to state 73
    if_else_statment  go to state 74
    method_call       go to state 75
    expr              go to state 76
    location          go to state 77
    literal           go to state 43
    bool_literal      go to state 44


State 74

   23 statement: if_else_statment .

    $default  reduce using rule 23 (statement)


State 75

   22 statement: method_call . SEMICOLON

    SEMICOLON  shift, and go to state 102


State 76

   24 statement: expr . QM block COLON block
   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    QM           shift, and go to state 103
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 77

   21 statement: location . ASSIGN expr SEMICOLON
   34 expr: location .

    ASSIGN  shift, and go to state 104

    $default  reduce using rule 34 (expr)


State 78

   14 method_arg: type ID OPEN_ANG INT_LITERAL . CLOSE_ANG
   15           | type ID OPEN_ANG INT_LITERAL . CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG

    CLOSE_ANG  shift, and go to state 105


State 79

   51 expr: OPEN_PARAN expr CLOSE_PARAN .

    $default  reduce using rule 51 (expr)


State 80

   54 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG . expr CLOSE_ANG

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 106
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 81

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   47     | expr LOGICAL_OR expr .
   48     | expr . LOGICAL_AND expr

    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65

    $default  reduce using rule 47 (expr)


State 82

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr
   48     | expr LOGICAL_AND expr .

    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65

    $default  reduce using rule 48 (expr)


State 83

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   45     | expr EQUALITY expr .
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 61
    ADD       shift, and go to state 62
    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 45 (expr)


State 84

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   46     | expr NONEQUALITY expr .
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 61
    ADD       shift, and go to state 62
    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 46 (expr)


State 85

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   43     | expr LESSTHAN expr .
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 61
    ADD       shift, and go to state 62
    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 43 (expr)


State 86

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   44     | expr GREATERTHAN expr .
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 61
    ADD       shift, and go to state 62
    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 44 (expr)


State 87

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   41     | expr LEQ expr .
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 61
    ADD       shift, and go to state 62
    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 41 (expr)


State 88

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   42     | expr GEQ expr .
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SUB       shift, and go to state 61
    ADD       shift, and go to state 62
    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    EQUALITY     error (nonassociative)
    NONEQUALITY  error (nonassociative)
    LESSTHAN     error (nonassociative)
    GREATERTHAN  error (nonassociative)
    LEQ          error (nonassociative)
    GEQ          error (nonassociative)

    $default  reduce using rule 42 (expr)


State 89

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   37     | expr SUB expr .
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    $default  reduce using rule 37 (expr)


State 90

   36 expr: expr . ADD expr
   36     | expr ADD expr .
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    MULTIPLY  shift, and go to state 63
    DIVIDE    shift, and go to state 64
    MODULO    shift, and go to state 65

    $default  reduce using rule 36 (expr)


State 91

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   38     | expr MULTIPLY expr .
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    $default  reduce using rule 38 (expr)


State 92

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   39     | expr DIVIDE expr .
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    $default  reduce using rule 39 (expr)


State 93

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   40     | expr MODULO expr .
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    $default  reduce using rule 40 (expr)


State 94

   30 method_call: CALLOUT OPEN_PARAN . STRING_LITERAL CLOSE_PARAN
   31            | CALLOUT OPEN_PARAN . STRING_LITERAL COMMA callout_args CLOSE_PARAN

    STRING_LITERAL  shift, and go to state 107


State 95

   26 statement: FOR OPEN_PARAN . expr SEMICOLON statement CLOSE_PARAN block

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 108
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 96

   28 if_else_statment: IF OPEN_PARAN . expr CLOSE_PARAN block
   29                 | IF OPEN_PARAN . expr CLOSE_PARAN block ELSE block

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 109
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 97

   25 statement: WHILE OPEN_PARAN . expr CLOSE_PARAN block

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 110
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 98

   18 block: OPEN_CURLY var_decls CLOSE_CURLY .

    $default  reduce using rule 18 (block)


State 99

   16 block: OPEN_CURLY var_decls statements . CLOSE_CURLY

    CLOSE_CURLY  shift, and go to state 111


State 100

   17 block: OPEN_CURLY statements CLOSE_CURLY .

    $default  reduce using rule 17 (block)


State 101

   19 statements: statement statements .

    $default  reduce using rule 19 (statements)


State 102

   22 statement: method_call SEMICOLON .

    $default  reduce using rule 22 (statement)


State 103

   24 statement: expr QM . block COLON block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 112


State 104

   21 statement: location ASSIGN . expr SEMICOLON

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    expr          go to state 113
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 105

   14 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG .
   15           | type ID OPEN_ANG INT_LITERAL CLOSE_ANG . OPEN_ANG INT_LITERAL CLOSE_ANG

    OPEN_ANG  shift, and go to state 114

    $default  reduce using rule 14 (method_arg)


State 106

   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr
   54 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr . CLOSE_ANG

    CLOSE_ANG    shift, and go to state 115
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 107

   30 method_call: CALLOUT OPEN_PARAN STRING_LITERAL . CLOSE_PARAN
   31            | CALLOUT OPEN_PARAN STRING_LITERAL . COMMA callout_args CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 116
    COMMA        shift, and go to state 117


State 108

   26 statement: FOR OPEN_PARAN expr . SEMICOLON statement CLOSE_PARAN block
   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 118
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 109

   28 if_else_statment: IF OPEN_PARAN expr . CLOSE_PARAN block
   29                 | IF OPEN_PARAN expr . CLOSE_PARAN block ELSE block
   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 119
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 110

   25 statement: WHILE OPEN_PARAN expr . CLOSE_PARAN block
   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    CLOSE_PARAN  shift, and go to state 120
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 111

   16 block: OPEN_CURLY var_decls statements CLOSE_CURLY .

    $default  reduce using rule 16 (block)


State 112

   24 statement: expr QM block . COLON block

    COLON  shift, and go to state 121


State 113

   21 statement: location ASSIGN expr . SEMICOLON
   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    SEMICOLON    shift, and go to state 122
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65


State 114

   15 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG . INT_LITERAL CLOSE_ANG

    INT_LITERAL  shift, and go to state 123


State 115

   54 location: ID OPEN_ANG expr CLOSE_ANG OPEN_ANG expr CLOSE_ANG .

    $default  reduce using rule 54 (location)


State 116

   30 method_call: CALLOUT OPEN_PARAN STRING_LITERAL CLOSE_PARAN .

    $default  reduce using rule 30 (method_call)


State 117

   31 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA . callout_args CLOSE_PARAN

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    callout_args  go to state 124
    expr          go to state 125
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 118

   26 statement: FOR OPEN_PARAN expr SEMICOLON . statement CLOSE_PARAN block

    CALLOUT         shift, and go to state 66
    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    FOR             shift, and go to state 67
    ID              shift, and go to state 21
    IF              shift, and go to state 68
    INT_LITERAL     shift, and go to state 35
    OPEN_CURLY      shift, and go to state 45
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    WHILE           shift, and go to state 69
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    block             go to state 71
    statement         go to state 126
    if_else_statment  go to state 74
    method_call       go to state 75
    expr              go to state 76
    location          go to state 77
    literal           go to state 43
    bool_literal      go to state 44


State 119

   28 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN . block
   29                 | IF OPEN_PARAN expr CLOSE_PARAN . block ELSE block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 127


State 120

   25 statement: WHILE OPEN_PARAN expr CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 128


State 121

   24 statement: expr QM block COLON . block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 129


State 122

   21 statement: location ASSIGN expr SEMICOLON .

    $default  reduce using rule 21 (statement)


State 123

   15 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL . CLOSE_ANG

    CLOSE_ANG  shift, and go to state 130


State 124

   31 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args . CLOSE_PARAN

    CLOSE_PARAN  shift, and go to state 131


State 125

   32 callout_args: expr . COMMA callout_args
   33             | expr .
   36 expr: expr . ADD expr
   37     | expr . SUB expr
   38     | expr . MULTIPLY expr
   39     | expr . DIVIDE expr
   40     | expr . MODULO expr
   41     | expr . LEQ expr
   42     | expr . GEQ expr
   43     | expr . LESSTHAN expr
   44     | expr . GREATERTHAN expr
   45     | expr . EQUALITY expr
   46     | expr . NONEQUALITY expr
   47     | expr . LOGICAL_OR expr
   48     | expr . LOGICAL_AND expr

    COMMA        shift, and go to state 132
    LOGICAL_OR   shift, and go to state 53
    LOGICAL_AND  shift, and go to state 54
    EQUALITY     shift, and go to state 55
    NONEQUALITY  shift, and go to state 56
    LESSTHAN     shift, and go to state 57
    GREATERTHAN  shift, and go to state 58
    LEQ          shift, and go to state 59
    GEQ          shift, and go to state 60
    SUB          shift, and go to state 61
    ADD          shift, and go to state 62
    MULTIPLY     shift, and go to state 63
    DIVIDE       shift, and go to state 64
    MODULO       shift, and go to state 65

    $default  reduce using rule 33 (callout_args)


State 126

   26 statement: FOR OPEN_PARAN expr SEMICOLON statement . CLOSE_PARAN block

    CLOSE_PARAN  shift, and go to state 133


State 127

   28 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block .
   29                 | IF OPEN_PARAN expr CLOSE_PARAN block . ELSE block

    ELSE  shift, and go to state 134

    $default  reduce using rule 28 (if_else_statment)


State 128

   25 statement: WHILE OPEN_PARAN expr CLOSE_PARAN block .

    $default  reduce using rule 25 (statement)


State 129

   24 statement: expr QM block COLON block .

    $default  reduce using rule 24 (statement)


State 130

   15 method_arg: type ID OPEN_ANG INT_LITERAL CLOSE_ANG OPEN_ANG INT_LITERAL CLOSE_ANG .

    $default  reduce using rule 15 (method_arg)


State 131

   31 method_call: CALLOUT OPEN_PARAN STRING_LITERAL COMMA callout_args CLOSE_PARAN .

    $default  reduce using rule 31 (method_call)


State 132

   32 callout_args: expr COMMA . callout_args

    CHAR_LITERAL    shift, and go to state 33
    FALSE           shift, and go to state 34
    ID              shift, and go to state 21
    INT_LITERAL     shift, and go to state 35
    OPEN_PARAN      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE            shift, and go to state 38
    SUB             shift, and go to state 39
    LOGICAL_NOT     shift, and go to state 40

    callout_args  go to state 135
    expr          go to state 125
    location      go to state 42
    literal       go to state 43
    bool_literal  go to state 44


State 133

   26 statement: FOR OPEN_PARAN expr SEMICOLON statement CLOSE_PARAN . block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 136


State 134

   29 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block ELSE . block

    OPEN_CURLY  shift, and go to state 45

    block  go to state 137


State 135

   32 callout_args: expr COMMA callout_args .

    $default  reduce using rule 32 (callout_args)


State 136

   26 statement: FOR OPEN_PARAN expr SEMICOLON statement CLOSE_PARAN block .

    $default  reduce using rule 26 (statement)


State 137

   29 if_else_statment: IF OPEN_PARAN expr CLOSE_PARAN block ELSE block .

    $default  reduce using rule 29 (if_else_statment)
